/*Expected Time Complexity: O(N) for getMin, O(1) for remaining all 4 functions.
Expected Auxiliary Space: O(1) for all the 5 functions.*/

int mi=99999;
void push(stack<int>& s, int a){
	if(s.empty())
	{
	    mi=a;
	    s.push(mi);
	}
	else
	{
	    int x=a;
	    if(a<mi)
	    {
	        x=2*a-mi;
	        mi=a;
	    }
	    s.push(x);
	}
}

bool isFull(stack<int>& s,int n){
	if(s.size()==n)
	return true;
	else
	return false;
}

bool isEmpty(stack<int>& s){
	if(s.empty())
	return true;
	else
	return false;
}

int pop(stack<int>& s){
	int v=s.top();
	if(v>=mi)
	s.pop();
	else
	{
	    int y=2*mi-v;
	    s.pop();
	    mi=y;
	}
}

int getMin(stack<int>& s){
	// Your code goes here
	return mi;
}
