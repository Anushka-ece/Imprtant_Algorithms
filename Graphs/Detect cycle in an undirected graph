bool dfs(int src,int parent,vector<int>adj[],vector<bool>&visited)
    {
        visited[src]=true;
        for(auto x:adj[src])
        {
            if(!visited[x])
            {
                if(dfs(x,src,adj,visited))
                return true;
            }
            else if(x!=parent)
            return true;
        }
        return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        vector<bool>visited(V,false);
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                bool f=dfs(i,-1,adj,visited);//-1 is parent here
                if(f)
                return true;
            }
        }
        return false;
    }
    
    Time Complexity: O(V+E). 
The program does a simple DFS Traversal of the graph which is represented using adjacency list. So the time complexity is O(V+E).
Space Complexity: O(V). 
To store the visited array O(V) space is required.
